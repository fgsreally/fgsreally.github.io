(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{516:function(v,t,_){"use strict";_.r(t);var s=_(4),e=Object(s.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[v._v("介绍")]),v._v(" "),_("p",[v._v("组件库搭建的主要难点，目的以及一点点新想法"),_("br")])]),v._v(" "),_("h2",{attrs:{id:"出发点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#出发点"}},[v._v("#")]),v._v(" 出发点")]),v._v(" "),_("p",[v._v("很多博客都开始讲如何构建组件库了，我也看了蛮多篇，然后自己也实践了一下，感觉别人写的还是离实际又一点差距。主要问题有两个，一是组件库共有的一些点，二是我做组件库是要干什么")]),v._v(" "),_("p",[v._v("我这里就直接用了 vue-cli 了， 不然还要自己做打包太费事了")]),v._v(" "),_("p",[v._v("如果把组件库当一个项目来讲，它的特点是结构比较清晰，无非就是"),_("strong",[v._v("父子级，兄弟级")]),v._v("，或者一个简单的树结构，而把组件一个个拆看来看，无非就是"),_("strong",[v._v("样式和逻辑")]),v._v("（结构样式一般来讲也没啥区别）")]),v._v(" "),_("blockquote",[_("p",[v._v("我主要指组件库中要搭配着使用的组件，那种独立的不谈")])]),v._v(" "),_("p",[v._v("所以不需要像一般项目那样考虑特定情况，情况就是这几点，")]),v._v(" "),_("ul",[_("li",[v._v("组件父子级，兄弟级别交互")]),v._v(" "),_("li",[v._v("组件本身逻辑+样式")])]),v._v(" "),_("h2",{attrs:{id:"组件交互"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组件交互"}},[v._v("#")]),v._v(" 组件交互")]),v._v(" "),_("p",[v._v("交互主要上指数据传递和事件触发，有这么几种方法：")]),v._v(" "),_("ul",[_("li",[v._v("第一种 "),_("code",[v._v("provide,inject")]),v._v(" 这在 vue2 用的少，在 vue3 就比较常见了，甚至说的上是一个状态共享的功能，根组件注入一个信息，所有组件都可共享，但需要注意的是，这只能是信息单向传递，子代不能向父代传")])]),v._v(" "),_("blockquote",[_("p",[v._v("我看过一篇文章说要用这个取代 vuex，也不知道这个脑回路绕哪儿去了")])]),v._v(" "),_("p",[v._v("第二个点和第三个点原理差不多，都是依赖组件实例上的"),_("code",[v._v("$parent,$children")]),v._v("，")]),v._v(" "),_("blockquote",[_("p",[v._v("说句题外话，其实想明白 vue，把一个 vue 组件实例的各个属性看一遍，会有非常大的帮助")])]),v._v(" "),_("ul",[_("li",[v._v("第二个点是触发父代（触发父代，如果父代没有那就一直往上走）或子代（只能是第一代，不然太自由了没法控制）的某个特定事件（只能是触发事件，属于包装度比较高的方法）")])]),v._v(" "),_("p",[v._v("说的直白点，就是 dispatch,broadcast 方法，遍历 parent,children 属性去触发事件")]),v._v(" "),_("ul",[_("li",[v._v("第三个点就自由度比较高了，")])]),v._v(" "),_("div",{staticClass:"language-javascript extra-class"},[_("pre",{pre:!0,attrs:{class:"language-javascript"}},[_("code",[v._v("  由一个组件，向上找到最近的指定组件；\n  由一个组件，向上找到所有的指定组件；\n  由一个组件，向下找到最近的指定组件；\n  由一个组件，向下找到所有指定的组件；\n  由一个组件，找到指定组件的兄弟组件。\n")])])]),_("p",[v._v("注意，这个时候要分清情况，不然会有不可控的事情发生。此外注意返回的是一个组件实例，可以从实例中直接读数据，或者触发事件")]),v._v(" "),_("p",[v._v("这两个点要注意一下:this，因为触发事件的地方，往往是在其他组件内的,所以尽可能 parent.$emit.apply(parent,....) 这样子,有了这几个方法，其实第一个问题就解决了，不过这 2，3 和 vue2 的贴合度比较高，做成 vue3 版本有点麻烦")]),v._v(" "),_("h2",{attrs:{id:"特殊组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特殊组件"}},[v._v("#")]),v._v(" 特殊组件")]),v._v(" "),_("p",[v._v("还有一些组件有点例外，不能用上面的方法，比如 elementui 种的 this.$message，那个原理是有三层\n第一层是一个.vue 文件，就是一个标准的组件\n第二层是一个函数执行 vue.extend 生成组件实例\n第三层是执行第二层函数并导入一些属性，最后在挂载在原型上")]),v._v(" "),_("h2",{attrs:{id:"我需要一个怎么样的组件库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#我需要一个怎么样的组件库"}},[v._v("#")]),v._v(" 我需要一个怎么样的组件库？")]),v._v(" "),_("p",[v._v("在说第二个点之前，先回到文章的开头，我是为什么要做组件库的。如果只是为了做组件库而做的话，没什么不好，但要么只能随便做个 demo，要么就等着被活活累死。一个简单的 form，不说样式，就是逻辑本身，用上前面那几个方法，依然可以说的上是极度复杂。")]),v._v(" "),_("p",[v._v("所以很多组件库版本迁移做的痛苦的要死，vuetify 现在都还没出 vue3 版本")]),v._v(" "),_("p",[v._v("（哥们还在等着呢")]),v._v(" "),_("p",[v._v("如果还要加上规则验证...没有需求我是绝对不愿意做这种东西的")]),v._v(" "),_("h2",{attrs:{id:"痛苦回忆"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#痛苦回忆"}},[v._v("#")]),v._v(" 痛苦回忆...")]),v._v(" "),_("p",[v._v("再要说一个很神奇的东西，叫 tailwindcss，这可以理解为一种 css 预处理语言（也算是预处理了吧。。），这个的制作者真的非常有野心，官网做的特别好看，说了各种优势，只要是 css 能做的它全能做...")]),v._v(" "),_("p",[v._v("这是我用它之前的想法哈，用它之后我就感觉哪里不大对了，官网说要摆脱语义化类名的限制，所以你就把类名当样式名写了是吧？")]),v._v(" "),_("p",[v._v("样式和结构高度绑定，如果想要复用，全要在配置文件种声明，自定义变量，自定义动画，这些东西也要在配置文件声明，原本我只需要看一眼结构，写一句样式，现在变成看一眼结构和样式，再看一下配置文件？我吭哧吭哧写了两天，觉得该放弃的时候还是要放弃...")]),v._v(" "),_("p",[v._v("但总归不全是坏处，"),_("strong",[v._v("结构与样式高度绑定")]),v._v("，这种高耦合的东西放在任何一个领域都不是一件好事，但放在前端反而有点好处了，因为样式就是要绑在结构上面，虽然复用性不好了（样式如果定制的话，其实很难复用），但在可读，以及更改上非常好用，搭配上组件的插槽，可以以另一种方式生成组件。")]),v._v(" "),_("h2",{attrs:{id:"一些新想法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一些新想法"}},[v._v("#")]),v._v(" 一些新想法")]),v._v(" "),_("p",[v._v("或许我说的不够明白，在这里我先介绍一个库，也是 tailwindcss 的子项目：headlessui，看名字也能看出来，前面我说组件本身有逻辑和样式，这个库就是生成只有逻辑的组件（其暴露了一些事件，称呼它为一级组件好了），你要在这个基础上给他写样式")]),v._v(" "),_("p",[v._v("那么工作流程是这样的，先写一个组件（设为二级组件），用一级组件组成结构，写好样式，留下插槽位置和暴露事件，在使用的时候根据需要的情况进行更改（如果需要更改组件的骨架，那么就到二级组件内部去改 tailwindcss，如果只改关键点，比如嵌入的按钮，那么在插槽中写 tailwindcss）")]),v._v(" "),_("p",[v._v("简而言之就是在徒手写一个组件，和直接引用组件库取了个中间值，比组件库自由度更高（组件库确实能改主题改样式，但很麻烦，你甚至要去看源码去看对应的类名是什么）")]),v._v(" "),_("blockquote",[_("p",[v._v("但这也有相应的问题，首先，项目一定要用 Tailwindcss，其次，headless 提供的一类组件实在太少，按照我自己写的那个 headlessui 的库的经验来说，像 form 这种逻辑复杂的还要自己想办法，headless 包里面主要做一些类似 card 这种逻辑简单的东西。")])]),v._v(" "),_("p",[v._v("我觉得未来有可能是一个组件库，里面有一批标准的逻辑模板，然后每个程序员根据弄自己的样式并分享，然后使用者只需要拿逻辑模板和喜欢的样式拼一下就好。比如我想实现一个鼠标移动时样式变化的效果，我只需要调用别人写好的逻辑，再把返回的值落实到 css 上就行（这好像和引入一个普通的函数无异，但这思路上是不一样的，因为逻辑部分可以达到拼凑拆分的效果。我自己写了一套 ml5 的逻辑部分，就是得到人脸距离镜头、是否转头、语音前后左右...的逻辑，拿着逻辑部分返回的值，就可以随心所欲做样式")]),v._v(" "),_("blockquote",[_("p",[v._v("（ 好像并不是很可信。。为啥我当时会这么想？")])]),v._v(" "),_("p",[v._v("附：为什么我不倾向做标准的组件库，这是因为很多东西别人都已经做过了，而且大多做的非常成熟，像国内的 element,iview 这些基本也没啥区别，很难做出新东西了,为啥我比较喜欢 vuetify，很大程度是里面有很多新想法，比如融入了一些自定义的指令，和 tailwindcss 相似的类名等等")])])}),[],!1,null,null,null);t.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{504:function(t,v,_){"use strict";_.r(v);var s=_(4),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("介绍")]),t._v(" "),_("p",[t._v("前端监控的对象+监控手法+面临困难+一些小技巧"),_("br")])]),t._v(" "),_("h3",{attrs:{id:"监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#监控"}},[t._v("#")]),t._v(" 监控")]),t._v(" "),_("p",[t._v("监控问题其实不太能说，因为各个大公司的性能监控工具以及平台做的都太出色了，不说别的，光是那个各类错误的可视化，那个复杂度就不是个人作者好处理的了，在说前端之前，先说后端的监控问题吧，这个区别才是前端监控棘手之处")]),t._v(" "),_("h2",{attrs:{id:"后端监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#后端监控"}},[t._v("#")]),t._v(" 后端监控")]),t._v(" "),_("p",[t._v("后端的问题一般只有四种，")]),t._v(" "),_("ul",[_("li",[t._v("cpu和内存，")]),t._v(" "),_("li",[t._v("磁盘打满，")]),t._v(" "),_("li",[t._v("tcp连接，")]),t._v(" "),_("li",[t._v("IO负载")])]),t._v(" "),_("p",[t._v("实际上也很难遇上四兄弟同时遇难，IO一般压测的时候就能看出来，tcp先不提，磁盘一般是日志没清理，")]),t._v(" "),_("p",[t._v("这三种都不算太致命，或者说，要么是能预料到的，要么是管不了的，主要问题是cpu和内存，这种一旦出问题，可以出在任何地方...")]),t._v(" "),_("blockquote",[_("p",[t._v("具体的解决方案就见仁见智了，我是倾向doctor或者直接快照用chrome看")])]),t._v(" "),_("h3",{attrs:{id:"前端监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前端监控"}},[t._v("#")]),t._v(" 前端监控")]),t._v(" "),_("p",[t._v("但前端...先喝口水，准备报菜名了哈")]),t._v(" "),_("p",[t._v("js语句报错，网络请求出错，白屏过长，画面卡顿，加载时间过长，pvuv统计，完整加载时间统计...,还有具体的错误信息，是哪个操作后导致问题出现，此时操作的是页面种的什么元素，具体报错在哪个文件种的哪一行..")]),t._v(" "),_("p",[t._v("我就做了基础，会报错的部分，主体思想就是善用mdn...比如"),_("code",[t._v("Performance")]),t._v("这个api在这里惊人的好用，稍微改一下timing那个部分就可以搞定pvuv的统计了（不过我还是想在路由守卫那里做掉这个）")]),t._v(" "),_("p",[t._v("还有一点值得说，和后端错误能写日志进磁盘不同，前端记录是要发回去后端的，但这种全方位的监控，发请求太多压力会大，所以有一个小技巧：jsonp,可以生成一个img对象，并使src=${对应后端接口}?${错误参数},用更低的成本去完成请求，但这样传递的信息比较小，报错类型的不适用！")])])}),[],!1,null,null,null);v.default=a.exports}}]);
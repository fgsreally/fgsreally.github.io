(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{506:function(a,t,s){"use strict";s.r(t);var r=s(4),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("介绍")]),a._v(" "),s("p",[a._v("Promise await async 等的问题，异步的解决思路"),s("br")])]),a._v(" "),s("h3",{attrs:{id:"异步问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步问题"}},[a._v("#")]),a._v(" 异步问题")]),a._v(" "),s("p",[a._v("因为校招的时候回回问这个破promise，就专门开一篇写一下\n（这个东西是真心没意思")]),a._v(" "),s("h2",{attrs:{id:"回调"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回调"}},[a._v("#")]),a._v(" 回调")]),a._v(" "),s("p",[a._v("原生的异步模式，也就是回调，问题来源于两方面，一是功能，二是可读性")]),a._v(" "),s("ul",[s("li",[a._v("功能差并不是性能差（其实回调的性能仍然是所有方案中最好的），举个例子，有三个异步任务1，2，3，当我希望完成1，2的时候去执行3，只完成一个的时候不执行三，亦或者错误时去执行另一个4，")])]),a._v(" "),s("p",[a._v("这个例子用回调去弄绝对是噩梦，回调就是老老实实的链式，一步接一步，让它跳着或者同时做好多个它就不行了，这就是逻辑控制/功能的问题")]),a._v(" "),s("ul",[s("li",[a._v("二是老生常谈的回调地狱了，除了看着恶心，改起来更是恶心心")])]),a._v(" "),s("p",[a._v("所以对异步的所有解决方案，都是围绕着这两方面")]),a._v(" "),s("h2",{attrs:{id:"事件的解决思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件的解决思路"}},[a._v("#")]),a._v(" 事件的解决思路")]),a._v(" "),s("p",[a._v("最早的解决方案，我没记错的话，应该是eventproxy，相当于做了个事件控制器，当某个回调完成时，通知一下控制器，控制器再去执行对应的回调。也算是个发布订阅吧，这来控制逻辑太简单了")]),a._v(" "),s("p",[a._v("两个问题解决了吗？解决是解决了\n但出现了新问题,比如我在第一行就声明了控制器，然后我在一百行的位置执行了异步...对，经典的goto出来了，那么写起来的感觉就是，先看一眼1行，再切到100行，再转回来...")]),a._v(" "),s("h2",{attrs:{id:"promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[a._v("#")]),a._v(" Promise")]),a._v(" "),s("p",[a._v("所以就有了promise，promise干了两件事，一是链式取代回调，让东西不嵌在一起的同时也不会离太远，二是有.all,.race等来完成逻辑控制")]),a._v(" "),s("p",[a._v("好像问题解决了？")]),a._v(" "),s("p",[a._v("不，在promise出现以后，很多人还是在用回调，因为一堆promise().then,then.then看着反而更奇怪的，程序长出来了一个奇怪的模样\n就像我用napi的时候，不是不会用，写出来就觉得奇怪")]),a._v(" "),s("blockquote",[s("p",[a._v("genrator我就不说了..这东西又难讲又难用又没什么用，挂起这个特性看似很牛但也没啥场景能用")])]),a._v(" "),s("h2",{attrs:{id:"async-await"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[a._v("#")]),a._v(" async/await")]),a._v(" "),s("p",[a._v("所以就有了async/await ，这个东西是架在promise基础上的，所以async/await没有对功能再做手脚，全心全意去处理写法，把异步的东西完完全全变成同步，只需要加个await即可（但await的实现是要依赖genrator的，不过应该没有面试考手写这个把，要是有就太变态了）")]),a._v(" "),s("p",[a._v("到了await这里，异步就没有什么变化了")]),a._v(" "),s("p",[a._v("其实所有的，具有特殊性的方法，都沿着这个思路，尽可能将其常规化，并添加需要的功能")])])}),[],!1,null,null,null);t.default=v.exports}}]);
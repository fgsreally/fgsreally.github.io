(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{500:function(s,v,_){"use strict";_.r(v);var t=_(4),a=Object(t.a)({},(function(){var s=this,v=s.$createElement,_=s._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[s._v("介绍")]),s._v(" "),_("p",[s._v("这真的快写出人命了。。。在手机上写的累死人了"),_("br")])]),s._v(" "),_("h3",{attrs:{id:"css"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[s._v("#")]),s._v(" css")]),s._v(" "),_("p",[s._v("如果是大学时期的我，称得上一句精通css。但如果现在问我，我只能说不要让我弄css")]),s._v(" "),_("p",[s._v("兄弟我怕了")]),s._v(" "),_("p",[s._v("所有技术方案，如果存在问题，一定是两个方面，一是功能局限，二是写法复杂--要么没用，要么难用")]),s._v(" "),_("p",[s._v("如果css真功能不行，那倒也行，关键是css的功能它不差，比起一些剪辑软件都不逊色。写法上css甚至可以说优势很大，以至于它根本不像一门编程语言，而是一个简单的小孩子填表，一个属性一个值就行了")]),s._v(" "),_("hr"),s._v(" "),_("p",[s._v("但麻烦也随之而来，强功能受弱操作控制，出现了一种独属于css的畸形写法，也就是所谓的tricks概念。(严格来讲这不能说是一件坏事，css难度来源于此，乐趣也来源于此，甚至有一个css的网站就以tricks命名)")]),s._v(" "),_("h2",{attrs:{id:"css-tricks"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#css-tricks"}},[s._v("#")]),s._v(" CSS tricks")]),s._v(" "),_("p",[s._v("什么是tricks呢？我举个例子")]),s._v(" "),_("p",[s._v("假设要画一条直线，正常的思路是画两个点，将点之间连起来，或者是画一个点，以某个角度，做射线出去，到一个长度值停下")]),s._v(" "),_("p",[s._v("读到这里可能已经意识到什么不对了吧")]),s._v(" "),_("p",[s._v("css要做一条直线，却是border:1px。")]),s._v(" "),_("p",[s._v("可以说过于神奇")]),s._v(" "),_("p",[s._v("还有那个经典的css面试题，画一个三角形，也是同样的思路")]),s._v(" "),_("blockquote",[_("p",[s._v("再说个复杂的，如果要用css做一个火苗效果，tm是依靠背景渐变色，加上滤镜filter，加上不断从根部上漂的黑色小球来实现")])]),s._v(" "),_("p",[s._v("就是说，在写css的过程中，你的脑袋必须时刻有洞。")]),s._v(" "),_("p",[s._v("当然，如果只想用css做一些基本的效果，那么这影响不大。接下来说css的第二个问题了")]),s._v(" "),_("h1",{attrs:{id:"使用场景的麻烦"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用场景的麻烦"}},[s._v("#")]),s._v(" 使用场景的麻烦")]),s._v(" "),_("p",[s._v("这个问题并不是css本身的问题，而是css使用场景的问题，一是css必须同时完成样式和布局两部分，实际编写时可能就是先每个元素做好布局，再回过头每个弄一遍样式，一旦写地思路不对，要改又要再回去一个一个元素去找。如果要移植手机端更是全部重来")]),s._v(" "),_("p",[s._v("二是兼容性的问题，你永远不知道某个样式在不同浏览器，不同端效果是否相同")]),s._v(" "),_("p",[s._v("总结一下，css三个问题")]),s._v(" "),_("ol",[_("li",[s._v("缺乏编程语言的可操作性，太依赖脑洞去完成效果")]),s._v(" "),_("li",[s._v("布局样式杂糅，多端服务导致需要重复编写")]),s._v(" "),_("li",[s._v("兼容")])]),s._v(" "),_("p",[s._v("有问题自然就有人解决，比较常见的就是各类css预处理语言,无论是less，还是sass，从写法上就可以看出来，各种嵌套，简写，加上一些明显有循环，解构，条件功能的东西,其实都是为了往css里面注入语言能力，并尽可能降低写法的复杂，嵌套的模式更是尽可能让布局易懂容易改")]),s._v(" "),_("p",[s._v("当然这个方向上还有更多的尝试，比如tailwindcss之类的(这个不算是预处理语言，但也是web端应用)，那个我单独写一章节好了")]),s._v(" "),_("h2",{attrs:{id:"邪门歪道"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#邪门歪道"}},[s._v("#")]),s._v(" 邪门歪道")]),s._v(" "),_("p",[s._v("这些预处理语言总之还是实现css同样的效果，也就是为网页提供样式，但还有一些人就把css干脆拿去干别的了")]),s._v(" "),_("p",[s._v("比如css_doodle，用的是原生web component，干脆放弃布局上的功能，专注于样式上，生成设计图，用grid的布局来生成大量的块体，利用一些数学表达式对其大小位置等属性更改，从而生成优美的图形")]),s._v(" "),_("p",[s._v("注意到关键没有？实际上所有的样式问题还是离不开审美的，如果压根想不到好看的东西，那自然写不出来，这个库的思路就是用大量块外加数学公式去绕过审美生成图形")]),s._v(" "),_("blockquote",[_("p",[s._v("我还见过一个依赖vue写的星空图，原理差不多，依赖于vue来进行生成大量div，和大批数据的控制，用数学公式改变数据，从而完成一样的效果。vue还有一个transition，但那个主要还是和组件的思路结合了。")])]),s._v(" "),_("p",[s._v("cssdoodle还往里面加入了@r @i，从而使得css里面可以完成随机等功能，也算是注入了一些语言的功能")]),s._v(" "),_("p",[s._v("还有一些更为阴间的用法，详见各年的css大会")]),s._v(" "),_("p",[s._v("这些人把css当ppt用，当建模工具用...属实思路广")]),s._v(" "),_("h2",{attrs:{id:"canvas"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#canvas"}},[s._v("#")]),s._v(" canvas")]),s._v(" "),_("p",[s._v("canvas就是我之前所说的那种标准的思路，依赖数学去画图，最适配js动画，可以做到帧级别的控制，同样也需要写一个比较复杂的，嵌套式的函数")]),s._v(" "),_("p",[s._v("canvas的神奇之处在于这个标签本身，它的渲染模式和div不一致，要更快，所以也有人希望用canvas代替html的标签写法")]),s._v(" "),_("p",[s._v("业务中有那种大数据渲染，有些组件库会有对应的组件，基本思路就是页面移动到哪儿就渲染对应的几十个，是用偷懒的思路，我有见过用canvas来做这个的，那就不是用偷懒的思路了，是正儿八经渲染的")]),s._v(" "),_("hr"),s._v(" "),_("p",[s._v("canvas里面还有一个极度强力的api，"),_("code",[s._v("getimagedata")]),s._v("，可以得到图像的像素以及颜色通道(在这个基础上自然可以对这个图像做各种神奇操作，比如滤镜灰度等等，只要你知道对应的原理，canvas可以帮助你实现")]),s._v(" "),_("blockquote",[_("p",[s._v("实际上对图片的操作是极度危险的，这和前后端无关，即使是在node那边，对图片操作也是不容易的，很多包的效果完全没有预料的好，有些图片压缩了反而越压体积越大了。我曾经想用napi写一个高斯模糊，但最后太麻烦懒得弄了")])]),s._v(" "),_("p",[s._v("canvas算得上是比较靠谱的对图片操作的方式了,实际上css也慢慢学习canvas的思路，最新出来一个point的api，可以明显感觉到和js动画写法如出一辙")]),s._v(" "),_("h2",{attrs:{id:"webgl-three-js"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webgl-three-js"}},[s._v("#")]),s._v(" webgl three.js")]),s._v(" "),_("p",[s._v("真正网页的3d处理方案，前者是原生的方案，相对底层，写一个图形还要从线段和三角开始，慢慢拼凑出来，还要注意数据的格式，着色器还是一种类c语言，数据在导入着色器之前还要先进缓冲区..")]),s._v(" "),_("p",[s._v("鉴于其操作麻烦，就弄出来了3.js,3.js就是标准的屏蔽底层操作，专注于实现，就只需要关注场景，灯光，摄像机，以及模型")]),s._v(" "),_("p",[s._v("不过无论是哪一种，模型的建立最好还是不要在前端做，如果非要前端去做的话，最好是对实物拍照，到一个网站(我忘了额，去制作模型，然后直接导入")]),s._v(" "),_("blockquote",[_("p",[s._v("顺嘴一说，3.js的设计真的非常牛，以至于几乎可以完全替换webgl")])]),s._v(" "),_("p",[s._v("再顺嘴一提，3d效果可以用更tricks的方式去做，之前有看到一个3d看房的东西，如果用建模那可就太难了，css或者parallel.js(应该叫这个吧)效果十分显著")]),s._v(" "),_("p",[s._v("如果不做3d，通过着色器也可以做很好的设计，但这个需要依赖图形学的知识，对矩阵计算和各类数学公式要有掌握(我大学专业对矩阵相当熟悉，但没有图形学的知识，我写这个依然极度痛苦")]),s._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),_("p",[s._v("没有总结...")])])}),[],!1,null,null,null);v.default=a.exports}}]);